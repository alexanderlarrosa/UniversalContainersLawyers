public with sharing class ucl_ConexionData {

    //Create conexion
    //Get JSON data
    public static HttpResponse getConexionData() {
        
        //Variables
        String url = 'https://altimetrik-bootcamp.herokuapp.com/LegalAccounts';
        Http http = new Http();
        HttpRequest request = new HttpRequest();


        //Get conexion
        request.setEndpoint(url);
        request.setMethod('GET');
        HttpResponse response = http.send(request);       
        return response;
    }

    //Convert response to Object
    public static void dataToObject(){
        HttpResponse response = getConexionData();

        //Verification of response status
        if(response.getStatusCode() == 200) {

            //Variables
            List<Legal_Advisor__c> newLegalAdvisorList = new List<Legal_Advisor__c>();
            List<Legal_Advisor__c> disabledAdvisorList = new List<Legal_Advisor__c>();
            List<Client__c> newClientsList = new List<Client__c>();

            //Creation List of Legal Advisor
            List<Object> legalAdvisorList = (List<Object>) JSON.deserializeUntyped(response.getBody());           
            
            //Iteration through List and Maps
            //Get data from Maps to set Custom Objet "Legal_Advisor__c"
            for(Object advisor:legalAdvisorList){
                Map<String,Object> legalAdvisorData = (Map<String,Object>) advisor;   
                Legal_Advisor__c legalAdvisor = new Legal_Advisor__c();
                String accountNumber = (String) legalAdvisorData.get('AccountNumber');
                String name = (String) legalAdvisorData.get('AccountName');
                String accountStatus = (String) legalAdvisorData.get('AccountStatus');
                String auxDate =  (String) legalAdvisorData.get('AsOfDate');           
                Date asOfDate = date.parse((String) legalAdvisorData.get('AsOfDate'));
                legalAdvisor.Account_Number__c = accountNumber;
                legalAdvisor.Name = name;
                legalAdvisor.Account_Status__c = accountStatus;
                legalAdvisor.As_of_Date__c = asOfDate;
                List<Object> clientList = (List<Object>) legalAdvisorData.get('Clients');
                newLegalAdvisorList.add(legalAdvisor);
                                                          
            }
            
            //insert newLegalAdvisorList;
            System.debug('Tamaño de la lista antes de llamar al metodo '+newLegalAdvisorList.size());
            insertAdvisorObjects(newLegalAdvisorList);
            
            //Iteration through List and Maps
            //Get data from Maps to set Custom Object "Clients"
            for(integer i=0; i<newLegalAdvisorList.size();i++){
                Map<String,Object> legalAdvisorData = (Map<String,Object>) legalAdvisorList[i];   
                List<Object> clientList = (List<Object>) legalAdvisorData.get('Clients');
                for(Object client:clientList){
                    Map<String,Object> clientData = (Map<String,Object>) client;
                    Client__c newClient = new Client__c();
                    String name = (String) clientData.get('FirstName');
                    String lastName = (String) clientData.get('LastName');
                    String email = (String) clientData.get('Email');
                    String phone = (String) clientData.get('Phone');
                    String adress = (String) clientData.get('Address');
                    String clientNumber = (String) clientData.get('ClientNumber');
                    Id legalAdvisorId = newLegalAdvisorList[i].Id;
                    newClient.Name = name;
                    newClient.Last_Name__c = lastName;
                    newClient.Email__c = email;
                    newClient.Phone__c = phone;
                    newClient.Address__c = adress;
                    newClient.Client_Number__c = clientNumber;
                    newClient.Legal_Advisor__c = legalAdvisorId;
                    if(newLegalAdvisorList[i].legalAdvisor.Account_Status__c == 'Enabled'){
                        newClientsList.add(newClient);
                    }
                    
                }                               
            }
                           
            //insert newClientsList;
            


        }
    }

    

    //Insert or update objects
    public static void insertAdvisorObjects(List<Legal_Advisor__c> advisorList){
        List<Legal_Advisor__c> insertAdvisorList = new List<Legal_Advisor__c>();
        List<Legal_Advisor__c> updateAdvisorList = new List<Legal_Advisor__c>();
        List<Legal_Advisor__c> oldAdvisorList = [SELECT Account_Number__c FROM Legal_Advisor__c WITH SECURITY_ENFORCED];
        System.debug('Tamaño old advisor list SQL '+oldAdvisorList.size());
        for(Legal_Advisor__c advisor:advisorList){
            System.debug('Entro en el for advisorList');
            for(Legal_Advisor__c oldAdvisor:oldAdvisorList){
                System.debug('Entreo en el for oldAdvisorList');
                if(advisor.Account_Number__c == oldAdvisor.Account_Number__c){
                    updateAdvisorList.add(advisor);
                } else if(advisor.Account_Status__c=='Enabled'){
                    insertAdvisorList.add(advisor);
                }
                
                
            }
        
        }
        //insert insertAdvisorList;
        //update updateAdvisorList;
        System.System.debug('**** Insert list*******');
        System.debug(insertAdvisorList);
        System.debug('**** Update list ******');
        System.debug(updateAdvisorList);

    }

    public static void insertClientObjects(List<Client__c> clientList){
        //SELECT Legal_Advisor__r.Account_Number__c, Client_Number__c  FROM Client__c
        List<Client__c> oldClientList = [SELECT Legal_Advisor__r.Account_Number__c, Client_Number__c  FROM Client__c WITH SECURITY_ENFORCED];
        
    }
}